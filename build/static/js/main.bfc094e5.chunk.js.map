{"version":3,"sources":["components/Title.jsx","components/Button.jsx","FormContext.jsx","components/Form.jsx","components/TextInput.jsx","docs/FormDoc.jsx","docs/ButtonDoc.jsx","docs/TextInputDoc.jsx","docs/DocsApp.jsx","App.js","serviceWorker.js","index.js"],"names":["Title","props","Component","tag","text","Button","type","label","onClick","onClickProp","color","buttonStyles","width","height","backgroundColor","fontSize","style","FormContext","React","createContext","memo","useState","formData","setFormData","onSubmitProp","onSubmit","handleFormUpdate","useCallback","name","value","prevFormData","Provider","updateForm","e","preventDefault","children","placeholder","initialValue","onChange","onChangeProp","form","useContext","setValue","handleOnChange","target","useEffect","marginBottom","defaultValue","FormDoc","className","console","log","ButtonDoc","handleClick","alert","TextInputDoc","DocsApp","display","flexDirection","flexWrap","flex","minHeight","textAlign","paddingTop","to","padding","path","exact","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bfc094e5.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Title(props) {\n    const { tag: Component, text } = props;\n    return (\n        <Component>\n            {text}\n        </Component>\n    )\n}\n\nexport default Title\n","import React from 'react'\n\nfunction Button(props) {\n    const {\n        type,\n        label,\n        onClick: onClickProp = () => { },\n        color = 'gray'\n    } = props;\n\n    const getColor = {\n        'gray': '#BDBDBD',\n        'red': '#B71C1C',\n        'blue': '#1565C0',\n        'green': '#388E3C',\n        'yellow': '#FDD835',\n        'black': '#212121'\n    }\n\n    const getTextColor = () => {\n        if (color === 'red' || color === 'blue' || color === 'green' || color === 'black') {\n            return '#fff'\n        } else {\n            return '#000'\n        }\n    }\n\n    const buttonStyles = {\n        width: '200px',\n        height: '35px',\n        backgroundColor: getColor[color],\n        color: getTextColor(),\n        fontSize: '1em'\n    }\n\n\n    return (\n        <button\n            type={type}\n            onClick={onClickProp}\n            style={buttonStyles}\n        >{label}</button>\n    )\n}\n\nexport default Button\n","import React from 'react'\n\nconst FormContext = React.createContext()\n\nexport default FormContext;","import React, { useState, useCallback } from 'react';\nimport FormContext from '../FormContext';\nimport Button from './Button';\nimport Title from './Title';\n\nfunction Form(props) {\n    const [formData, setFormData] = useState({})\n    const { onSubmit: onSubmitProp } = props;\n\n    const handleFormUpdate = useCallback((name, value) => {\n        setFormData((prevFormData) => {\n            return {\n                ...prevFormData,\n                [name]: value\n            }\n        })\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [formData.name])\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onSubmitProp(formData)\n    }\n\n    return (\n        <FormContext.Provider value={{ updateForm: handleFormUpdate }}>\n            <form onSubmit={handleSubmit}>\n                <Title tag=\"h1\" text=\"Form Components\" />\n                {props.children}\n                <Button type=\"submit\" label=\"Submit Form\" />\n            </form>\n        </FormContext.Provider >\n    );\n}\n\nexport default React.memo(Form)\n","import React, { useState, useEffect, useContext, useCallback } from 'react'\nimport FormContext from '../FormContext';\n\nfunction TextInput(props) {\n\n    const {\n        name,\n        type,\n        placeholder,\n        initialValue,\n        onChange: onChangeProp = () => { }\n    } = props;\n    const form = useContext(FormContext);\n\n    const [value, setValue] = useState(initialValue);\n\n    const handleOnChange = useCallback(\n        (e) => {\n            setValue(e.target.value)\n        },\n        [],\n    )\n\n    useEffect(() => {\n        onChangeProp(value)\n        if (form) {\n            form.updateForm(name, value)\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [value])\n\n    return (\n        <div style={{ marginBottom: '10px' }}>\n            <input\n                style={{ height: '30px', width: '100%' }}\n                name={name}\n                type={type}\n                defaultValue={value}\n                onChange={handleOnChange}\n                placeholder={placeholder}\n            ></input>\n        </div>\n    )\n}\n\nexport default React.memo(TextInput)\n","import React, { useState } from 'react';\nimport { Form, TextInput } from '../components';\n\nfunction FormDoc() {\n\n    const [value, setValue] = useState('')\n\n    const handleChange = (value) => {\n        setValue(value)\n    }\n\n    const handleSubmit = (formData) => {\n        console.log(formData)\n    }\n\n    return (\n        <div className=\"App\">\n            <Form onSubmit={handleSubmit}>\n                <TextInput\n                    name=\"firstName\"\n                    type=\"text\"\n                    placeholder=\"Enter your first name\"\n                />\n                <TextInput\n                    name=\"lastName\"\n                    type=\"text\"\n                    placeholder=\"Enter your last name\"\n                />\n            </Form>\n            <h1>Text input Without form</h1>\n            <TextInput\n                name=\"address\"\n                type=\"text\"\n                placeholder=\"Enter your Address\"\n                onChange={handleChange}\n            />\n            {value}\n        </div>\n    );\n}\n\nexport default FormDoc;\n","import React from 'react'\nimport { Button } from '../components'\n\nfunction ButtonDoc() {\n    const handleClick = () => {\n        alert(`Button Clicked`)\n    }\n    return (\n        <div>\n            <h1>Button</h1>\n            <h2>The Button Component is simple to use native <span className=\"demo-code\">button</span> and has additional range of colors</h2>\n            <p>Button component can be used using <strong>{`<Button></Button>`}</strong> tag</p>\n            {/* Props Table */}\n            <p><strong>Props</strong></p>\n            <table className=\"propTable\">\n                <tbody>\n                    <tr><th>Prop Name</th><th>Type</th><th>Description</th></tr>\n                    <tr>\n                        <td>name <small>(required)</small></td>\n                        <td>string</td>\n                        <td>The input's name, to identify the input in the data submitted with the form's data</td>\n                    </tr>\n                    <tr>\n                        <td>type <small>(required)</small></td>\n                        <td>string</td>\n                        <td>The default behavior of the button. Possible values are\n                            <span className=\"code\">submit</span>,\n                            <span className=\"code\">button</span>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>onClick</td>\n                        <td>function</td>\n                        <td>Triggers the <span className=\"code\">onclick</span> event occurs when the user clicks on the button element</td>\n                    </tr>\n                </tbody>\n            </table>\n            {/* Default Button Demo */}\n            <div className=\"demo-container\">\n                <h3><strong>Default Buttons</strong> can be created using</h3>\n                <code>{`<Button onClick={handleClick} type=\"button\" label=\"Default button\" />`}</code>\n                <div className=\"demo-ui\">\n                    <Button onClick={handleClick} type=\"button\" label=\"Default button\" />\n                </div>\n            </div>\n            {/* Color Button Demo */}\n            <div className=\"demo-container\">\n                <h3><strong>Color Buttons</strong> can be created using the <span className=\"demo-code\">color</span> prop</h3>\n                <code>{`<Button onClick={handleClick} type=\"button\" color=\"red\" label=\"Red button\" />`}</code>\n                <div className=\"demo-ui\">\n                    <Button onClick={handleClick} type=\"button\" color=\"red\" label=\"Red button\" />\n                    <Button onClick={handleClick} type=\"button\" color=\"blue\" label=\"Blue button\" />\n                    <Button onClick={handleClick} type=\"button\" color=\"green\" label=\"Green button\" />\n                    <Button onClick={handleClick} type=\"button\" color=\"yellow\" label=\"Yellow button\" />\n                    <Button onClick={handleClick} type=\"button\" color=\"black\" label=\"Black button\" />\n                </div>\n            </div>\n\n\n        </div>\n    )\n}\n\nexport default ButtonDoc\n","import React from 'react'\nimport { TextInput } from '../components'\n\nfunction TextInputDoc() {\n\n    return (\n        <div>\n            <h1>TextInput</h1>\n            <h2>The TextInput Component is simple to use native <span className=\"demo-code\">input</span> element for creating interactive form control</h2>\n            <p>TextInput component can be used using <strong>{`<TextInput></TextInput>`}</strong> tag</p>\n            {/* Props Table */}\n            <p><strong>Props</strong></p>\n            <table className=\"propTable\">\n                <tbody>\n                    <tr><th>Prop Name</th><th>Type</th><th>Description</th></tr>\n                    <tr>\n                        <td>name <small>(required)</small></td>\n                        <td>string</td>\n                        <td>The input's name, to identify the input in the data submitted with the form's data</td>\n                    </tr>\n                    <tr>\n                        <td>type <small>(required)</small></td>\n                        <td>string</td>\n                        <td>A string indicating which input type the element represents</td>\n                    </tr>\n                    <tr>\n                        <td>placeholder</td>\n                        <td>string</td>\n                        <td>The placeholder attribute lets you specify a text that appears within the element's content area itself when empty</td>\n                    </tr>\n                    <tr>\n                        <td>onChange</td>\n                        <td>function</td>\n                        <td>onChange function returns the current value of the input component</td>\n                    </tr>\n                </tbody>\n            </table>\n            {/* Default Button Demo */}\n            <div className=\"demo-container\">\n                <h3><strong>TextInput</strong> can be standalone using</h3>\n                <code>{`<TextInput name=\"fullName\" type=\"text\" placeholder=\"Enter your name\" />`}</code>\n                <div className=\"demo-ui\">\n                    <TextInput name=\"fullName\" type=\"text\" placeholder=\"Enter your name\" />\n                </div>\n            </div>\n\n\n\n        </div>\n    )\n}\n\nexport default TextInputDoc\n","import React from 'react';\nimport FormDoc from './FormDoc';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport ButtonDoc from './ButtonDoc';\nimport TextInputDoc from './TextInputDoc';\n\nfunction DocsApp() {\n\n    const leftSidebarStyles = {\n        flex: 2,\n        minHeight: '100vh',\n        backgroundColor: '#B71C1C',\n        color: '#fff'\n    }\n\n    return (\n        <Router>\n            <div style={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap' }}>\n                <div style={leftSidebarStyles}>\n                    <div>\n                        <h3 style={{ textAlign: 'center', paddingTop: '2em' }}>User Interface Components</h3>\n                    </div>\n                    <div className=\"navBar\">\n                        <ul>\n                            <li><Link to=\"/button\">Button</Link></li>\n                            <li><Link to=\"/text-input\">TextInput</Link></li>\n                            <li><Link to=\"/form\">Form</Link></li>\n                        </ul>\n                    </div>\n                </div>\n                <div style={{ flex: 10, padding: '5em' }}>\n                    <Route path=\"/\" exact component={FormDoc} />\n                    <Route path=\"/form\" component={FormDoc} />\n                    <Route path=\"/button\" component={ButtonDoc} />\n                    <Route path=\"/text-input\" component={TextInputDoc} />\n                </div>\n            </div>\n        </Router>\n\n\n    );\n}\n\nexport default DocsApp;\n","import React from 'react';\nimport './App.css';\nimport DocsApp from './docs/DocsApp';\n\n\nfunction App() {\n  return <DocsApp />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}